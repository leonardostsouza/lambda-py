# lambda-py
# A simple didactic lambda calculus interpreter written in python
# interpreter.py

import sys

LAMBDA = '/'
RESERVED = [LAMBDA, '.', '(', ')', ' ']


# convert string into tokens
def tokenize(raw_expression):
    expression = []
    token = ''

    for char in raw_expression:
        if char in RESERVED:
            if token != '':
                expression.append(token)
                token = ''
            if char != ' ':
                expresion.append(char)
        else:
            token = token + char

    if token != ' ':
        expression.append(token)

    return expression


#analyses syntax generated by the lexer function
def parse(expression):
    #TODO; implement á¹•arser function

def main():
    raw_expression = ""
    result = ""

    print("Lambda-py: A simple didactic lambda calculus interpreter")
    print("Write an expression to be reduced")
    print("e.g.: (/x.x)(a) ---> For convenience, '" + LAMBDA + "' represents te lambda")
    print("Press CTRL + C to quit")

    while True:
        raw_expression = raw_input(">")
        if (raw_expression != ''):
            expression = tokenize(raw_expression)
            result = parse(expression)
        print(result)
